In an ever-expanding world of microservices, APIs, and devices, maintaining an
overview of application states and the myriad errors that can occur is
challenging. For years, Sentry has been a go-to choice for developers to
monitor their applications and receive notifications about issues within their
code.

Traditionally, Sentry was predominantly a Python shop, but they became one of
the early adopters of Rust in their technology stack. They have been utilizing
Rust for a few years now (since at least 2017), starting with sentry-cli, a
command-line utility to work with Sentry, and continuing with their source map
parsing pipeline, which reduced processing times from 20 seconds to less than
500 milliseconds.

More recently, they have been developing two new projects in Rust: relay and
symbolicator. Relay acts as a proxy for sending events to Sentry, while
symbolicator is a service for handling the symbolication of stack traces. Both
projects are open source and available on GitHub.

Arpad Borsos (swatinem), Senior Native Platform Engineer at Sentry, sat down
with me to discuss their journey with Rust and how it has enabled them to build
a cutting-edge monitoring platform for large-scale applications.

Our conversation covered topics such as 100x speedups, the Rust-Python
interface, and the comparison between actor-based and task-based concurrency.